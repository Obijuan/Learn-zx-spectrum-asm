;----------------------------------------------------------------------------
;-- RUTINAS DE VIDEO
;----------------------------------------------------------------------------

;----------------------------------------------------------------------------
;-- cls: Borrar la pantalla con los atributos indicados
;--
;-- ENTRADA:
;--   * A: Atributos a utilizar
;----------------------------------------------------------------------------
cls:
    ;-- Rellenar toda la memoria de video con ceros para limpiar... 
    ld hl, VIDEORAM      ;-- HL: Puntero a la memoria de Video
    ld (hl), $00         ;-- Borrar posicion actual
    ld de, VIDEORAM + 1  ;-- Siguiente posicion
    ld bc, VIDEOSIZE - 1 ;-- Tamaño de la memoria de video
    ldir

    ;-- Establecer los atributos de la memoria de video
    ld hl, VIDEOATTR
    ld (hl), a                ;-- Escribir atributos
    ld de, VIDEOATTR + 1
    ld bc, VIDEATTR_SIZE - 1  ;-- Tamaño de la memoria de atributo (menos uno)
    ldir

    ret

;--------------------------------------------------------------------
;--  NextScan: Obtener la direccion del siguiente scanline
;--
;--  ENTRADA:
;--    * HL: Scanline actual
;--  SALIDA:
;--    * HL: Scanline siguiente
;--
;--  Formato direccion: 010TTSSS LLLCCCCC
;---------------------------------------------------------------------
NextScan:

    ;-- Incrementar scanline (Módulo 7)
    inc h
    ld a,h
    and $7
    ret nz  ;-- Si no es cero hemos terminado

    ;-- El scanline es 8 (mayor de 3 bits)
    ;-- Hay que pasar a la siguiente linea (incrementar LLL)
    ld a,l  ;-- A = LLLC CCCC
    add a,$20 ;-- +   0010 0000
    ld l,a
    ret c   ;-- Si hay acarreo hemos terminado

    ;-- Decrementar el tercio (se había incrementado en el paso 1)
    ld a, h  ;-- A = 010T TSSS
    sub $08  ;--     0000 1000
    ld h, a
    ret

;-----------------------------------------------------------------------------
;-- draw_sprite: Dibujar un sprite (de 8 lineas) en la pantalla (de 8 lineas)
;-- 
;-- ENTRADAS:
;--   * HL: Direccion de la memoria de video
;--   * DE: Direccion del sprite a pintar
;-----------------------------------------------------------------------------
draw_sprite8:
  
  ld b, 8  ;-- El sprite tiene 8 lineas

sprite_loop:
  ld a, (de)  ;-- Leer byte del sprite
  ld (hl), a  ;-- Mostrar byte en pantalla
  inc h       ;-- Siguiente linea
  inc de      ;-- Siguiente byte
  djnz sprite_loop

  ret

;-----------------------------------------------------------------------------
;-- draw_sprite18: Dibujar un sprite (de 18 lineas) en la pantalla
;-- 
;-- ENTRADAS:
;--   * HL: Direccion de la memoria de video
;--   * DE: Direccion del sprite a pintar
;-----------------------------------------------------------------------------
draw_sprite18:
  
  ld b, 18  ;-- El sprite tiene 18 lineas

sprite18_loop:
  ld a, (de)  ;-- Leer byte del sprite
  ld (hl), a  ;-- Mostrar byte en pantalla

  ;-- Siguiente linea
  call NextScan
  
  ;-- Siguiente byte
  inc de

  ;-- Repetir
  djnz sprite18_loop

  ret


;-----------------------------------------------------------------------------
;-- draw_sprite16: Dibujar un sprite (de 16 lineas) en la pantalla
;-- 
;-- ENTRADAS:
;--   * HL: Direccion de la memoria de video
;--   * DE: Direccion del sprite a pintar
;-----------------------------------------------------------------------------
draw_sprite16:
  
  ld b, 16  ;-- El sprite tiene 18 lineas

sprite16_loop:
  ld a, (de)  ;-- Leer byte del sprite
  ld (hl), a  ;-- Mostrar byte en pantalla

  ;-- Siguiente linea
  call NextScan
  
  ;-- Siguiente byte
  inc de

  ;-- Repetir
  djnz sprite16_loop

  ret

;----------------------------------------------------------------------------
;-- blank_sprite18: Borrar todos los pixeles de un sprite de 18 lines
;--
;-- ENTRADAS:
;--   * HL: Direccion de la memoria de video
;----------------------------------------------------------------------------
blank_sprite18:
  ld b, 18  ;-- Sprite de 16 lineas

blank_sprite18_loop:
  xor a        ;-- A = 0
  ld (hl), a   ;-- Borrar linea

  ;-- Siguiente linea
  call NextScan

  ;-- Repetir
  djnz blank_sprite18_loop

  ret

;----------------------------------------------------------------------------
;-- blank_sprite16: Borrar todos los pixeles de un sprite de 16 lines
;--
;-- ENTRADAS:
;--   * HL: Direccion de la memoria de video
;----------------------------------------------------------------------------
blank_sprite16:
  ld b, 16  ;-- Sprite de 16 lineas

blank_sprite16_loop:
  xor a        ;-- A = 0
  ld (hl), a   ;-- Borrar linea

  ;-- Siguiente linea
  call NextScan

  ;-- Repetir
  djnz blank_sprite16_loop
  
  ret

;---------------------------------------------------------------------------
;- DF_LOC: Devolver la memoria de video asociada a la posicon (LNEA,COL)
;-
;-- ENTRADAS:
;--    * B = Linea (0-23)
;--    * C = Col (0 - 31)
;--
;-- SALIDA:
;--    * HL: Direccion de video
;--
;-- Formato de la direccion de video:
;-- 010T TSSS LLLC CCCC
;--
;-- El tercio se toma como parte de la linea para trabajar en el rango 0-21 
;-- Así la linea es TTLLL (5-bits). Está formada por dos campos
;---------------------------------------------------------------------------
DF_LOC:

    ld a,b    ;-- A = Linea (000T TLLL)
    and $f8   ;-- Poner a 0 los bits L (dejando solo los T)
              ;-- A = 000T T000
    add a,$40 ;-- A = 0100 0000 --> 010T T000
    ;-- H completado: Contiene valor corrector y el Tercio establecido (TT)
    ld h, a   ;-- H = 010T T000

    ;-- Establecer la parte baja en reg L (LLLC CCCC)
    ld a,b    ;-- A = linea (000T TLLL)
    and $7    ;-- A = 000T TLLL
              ;--     0000 0111
              ;-- A = 0000 0LLL  (Nos quedamos con la linea)
    rrca      ;-- A = L000 00LL
    rrca      ;-- A = LL00 000L
    rrca      ;-- A = LLL0 0000 (Tenemos LLL bien posicionado)

    ;-- Añadir el campo de la columna (que esta en C)
    add a,c

    ;-- Actualizar L
    ld l,a

    ;-- HL contiene la direccion
    ret

;---------------------------------------------------------------------------
;- ATTLOC: Devolver la memoria de video de atributos asociada a la
;-         posicion (LINEA, COL)
;-
;-- ENTRADAS:
;--    * B = Linea (0-23)
;--    * C = Col (0 - 31)
;--
;-- SALIDA:
;--    * HL: Direccion de video de atributos
;--
;---------------------------------------------------------------------------
ATTLOC:

    ld a,b   ;-- A = Linea (000TTLLL)

    ;-- Obtener los bits asociados al tercio
    sra a      ;-- A = 0000TTLL
    sra a      ;-- A = 00000TTL
    sra a      ;-- A = 000000TT

    ;-- Añadir comienzo de memoria de atributos (0x5800)
    add a,$58  ;-- 58  01011000
               ;-- A = 010110TT

    ;-- Ya tenemos H listo
    ld h,a 

    ;-- Leer la linea de nuevo
    ld a,b   ;-- A = 000TTLLL

    ;-- Aislar el campo LLL
    and $7   ;   7 = 00000111
             ;   A = 00000LLL

    ;-- Colocar LLL en los bits e mayor peso
    rrca     ;   A = L00000LL
    rrca     ;   A = LL00000L
    rrca     ;   A = LLL00000

    ;-- Añadir la columna
    add a,c  ;   A = LLLCCCCC

    ;-- Ya tenemos L listo
    ld l,a

    ;-- Terminar
    ret

